// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: simple.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "simple";

export interface SubMessage {
  int32: number;
  optionalInt32?: number | undefined;
}

export interface Message {
  int32: number;
  optionalInt32?: number | undefined;
  optionalSubMessage?: SubMessage | undefined;
  requiredSubMessage: SubMessage;
  requiredTimestamp: Timestamp;
  optionalTimestamp?: Timestamp | undefined;
}

export const SIMPLE_PACKAGE_NAME = "simple";

export interface SimpleServiceClient {
  getMessage(request: Message): Observable<Message>;
}

export interface SimpleServiceController {
  getMessage(request: Message): Promise<Message> | Observable<Message> | Message;
}

export function SimpleServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getMessage"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SimpleService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SimpleService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SIMPLE_SERVICE_NAME = "SimpleService";
